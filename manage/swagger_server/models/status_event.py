# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class StatusEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, type: str=None, detect: bool=None, location: str=None):  # noqa: E501
        """StatusEvent - a model defined in Swagger

        :param id: The id of this StatusEvent.  # noqa: E501
        :type id: str
        :param type: The type of this StatusEvent.  # noqa: E501
        :type type: str
        :param detect: The detect of this StatusEvent.  # noqa: E501
        :type detect: bool
        :param location: The location of this StatusEvent.  # noqa: E501
        :type location: str
        """
        self.swagger_types = {
            'id': str,
            'type': str,
            'detect': bool,
            'location': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'detect': 'detect',
            'location': 'location'
        }
        self._id = id
        self._type = type
        self._detect = detect
        self._location = location

    @classmethod
    def from_dict(cls, dikt) -> 'StatusEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The status_event of this StatusEvent.  # noqa: E501
        :rtype: StatusEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this StatusEvent.

        障害物の識別子  # noqa: E501

        :return: The id of this StatusEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this StatusEvent.

        障害物の識別子  # noqa: E501

        :param id: The id of this StatusEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this StatusEvent.

        障害物の種別  # noqa: E501

        :return: The type of this StatusEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this StatusEvent.

        障害物の種別  # noqa: E501

        :param type: The type of this StatusEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def detect(self) -> bool:
        """Gets the detect of this StatusEvent.

        障害物を検知したか、障害物がなくなったかを示す  # noqa: E501

        :return: The detect of this StatusEvent.
        :rtype: bool
        """
        return self._detect

    @detect.setter
    def detect(self, detect: bool):
        """Sets the detect of this StatusEvent.

        障害物を検知したか、障害物がなくなったかを示す  # noqa: E501

        :param detect: The detect of this StatusEvent.
        :type detect: bool
        """
        if detect is None:
            raise ValueError("Invalid value for `detect`, must not be `None`")  # noqa: E501

        self._detect = detect

    @property
    def location(self) -> str:
        """Gets the location of this StatusEvent.

        位置情報  # noqa: E501

        :return: The location of this StatusEvent.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this StatusEvent.

        位置情報  # noqa: E501

        :param location: The location of this StatusEvent.
        :type location: str
        """

        self._location = location
